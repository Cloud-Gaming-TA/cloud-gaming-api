services:
  proxy:
    build:
      context: "../reverse_proxy/"
      dockerfile: Dockerfile
      args:
        - PORT=3000
        - CSR_FILE_PATH=cert/request.csr
        - CERT_FILE_PATH=cert/proxy-service.cert
        - PRIVATE_KEY_PATH=cert/proxy-service.key
        - PKI_HOST=localhost:5500
      target: final
      network: host
    ports:
      - "3000:3000"
    networks:
      - internal
      - public
    healthcheck:
      test: curl -k --fail https://proxy:3000/health || exit 1
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 30s
  auth:
    build:
      context: "../api/"
      dockerfile: Dockerfile
      args:
        - SERVICE_NAME=auth
        - PORT=6000
        - CSR_FILE_PATH=cert/request.csr
        - CERT_FILE_PATH=cert/auth-service.cert
        - PRIVATE_KEY_PATH=cert/auth-service.key
        - PKI_HOST=localhost:5500
      target: final
      network: host
    ports:
      - "6000"
    networks:
      - auth
      - internal
    environment:
      - DB_USER=test
      - DB_PASSWORD_FILE=/run/secrets/db-auth-secret
      - DB_DATABASE_NAME=auth_db
      - JWT_SECRET_KEY_FILE=/run/secrtes/jwt-secret-key
    entrypoint: ./scripts/compose-entrypoint.sh
    secrets:
      - db-auth-secret
      - jwt-secret-key
      
    depends_on:
      db-auth:
        condition: service_healthy
      proxy:
        condition: service_healthy
  account:
    build:
      context: "../api/"
      dockerfile: Dockerfile
      args:
        - SERVICE_NAME=account
        - PORT=8000
        - CSR_FILE_PATH=cert/request.csr
        - CERT_FILE_PATH=cert/account-service.cert
        - PRIVATE_KEY_PATH=cert/account-service.key
        - PKI_HOST=localhost:5500
      target: final
      network: host
    ports:
      - "8000"
    networks:
      - account
      - internal
    environment:
      - DB_USER=test
      - DB_PASSWORD_FILE=/run/secrets/db-account-secret
      - DB_DATABASE_NAME=account_db
      - HASH_SECRET_KEY_FILE=/run/secrets/password-hash-key
    entrypoint: ./scripts/compose-entrypoint.sh
    secrets:
      - db-account-secret
      - password-hash-key
    depends_on:
      db-account:
        condition: service_healthy
      proxy:
        condition: service_healthy
  games:
    build:
      context: "../api/"
      dockerfile: Dockerfile
      args:
        - SERVICE_NAME=games
        - PORT=3500
        - CSR_FILE_PATH=cert/request.csr
        - CERT_FILE_PATH=cert/games-service.cert
        - PRIVATE_KEY_PATH=cert/games-service.key
        - PKI_HOST=localhost:5500
      target: final
      network: host
    ports:
      - "3500"
    networks:
      - games
      - internal
    environment:
      - DB_USER=test
      - DB_PASSWORD_FILE=/run/secrets/db-games-secret
      - DB_DATABASE_NAME=games_db
    entrypoint: ./scripts/compose-entrypoint.sh
    secrets:
      - db-games-secret
    depends_on:
      db-games:
        condition: service_healthy
      proxy:
        condition: service_healthy
  # middleware service
  mail:
    build: "../middleware/mail/"
    ports:
      - "4000"
    environment:
      - PORT=4000
      - SMTP_CONFIG_NAME=SOME COMPANY
      - SMTP_CONFIG_EMAIL=adityapt.01@gmail.com
      - SMTP_PASSWORD_FILE=/run/secrets/smtp_password
    entrypoint: "./scripts/compose-entrypoint.sh"
    secrets:
      - smtp_password
    networks:
      - internal

  steam-openid:
    build: 
      context: "../middleware/steam-openid/"
      args:
        - PORT=7000
        - SERVICE_NAME=steam-openid
        - CSR_FILE_PATH=cert/request.csr
        - CERT_FILE_PATH=cert/steam-middleware.cert
        - PRIVATE_KEY_PATH=cert/steam-middleware.key
        - PKI_HOST=localhost:5500
      network: host
    environment:
      - STEAM_API_KEY_FILE=/run/secrets/steam_api_key
    secrets:
       - steam_api_key
    # middleware/steam-openid/scripts/compose-entrypoint.sh
    entrypoint: "./scripts/compose-entrypoint.sh"
    ports:
      - "7000:7000"
    networks:
      - internal
      - public
  db-account:
    build:
      context: "./db/"
      args:
        - SERVICE_NAME=account
    ports:
      - "5432"
    networks:
      - account
    volumes:
      - ${DB_VOLUME}/db-account:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-account-secret
    secrets:
      - db-account-secret
    # entrypoint: /scripts/postgres-compose-entrypoint.sh
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "test"]
      timeout: 20s
      retries: 10
  db-auth:
    build:
      context: "./db/"
      args:
        - SERVICE_NAME=auth
    ports:
      - "5432"
    networks:
      - auth
    volumes:
      - ${DB_VOLUME}/db-auth:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-auth-secret
    secrets:
      - db-auth-secret
    # entrypoint: /scripts/postgres-compose-entrypoint.sh
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "test"]
      timeout: 20s
      retries: 10
  db-games:
    build:
      context: "./db/"
      args:
        - SERVICE_NAME=games
    ports:
      - "5432"
    networks:
      - games
    volumes:
      - ${DB_VOLUME}/db-games:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-games-secret
    secrets:
      - db-games-secret
    # entrypoint: /scripts/postgres-compose-entrypoint.sh
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "test"]
      timeout: 20s
      retries: 10

networks:
  auth: {}
  account: {}
  games: {}
  internal: {}
  public: 
    driver: bridge

secrets:
  password-hash-key:
    file: '../api/secrets/password_hash_key.txt'
  jwt-secret-key:
    file: '../api/secrets/jwt_secret_key.txt'
  db-account-secret:
    file: './db/secrets/db_account_password.txt'
  db-auth-secret:
    file: './db/secrets/db_auth_password.txt'
  db-games-secret:
    file: './db/secrets/db_games_password.txt'
  smtp_password:
    file: '../middleware/mail/secrets/smtp_password.txt'
  steam_api_key:
    file: '../middleware/steam-openid/secrets/steam_api_key.txt'